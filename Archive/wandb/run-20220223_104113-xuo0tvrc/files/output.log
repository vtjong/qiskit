/Users/valenetjong/qiskit/hybridlayers.py:67: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  result = torch.tensor([expectation_z])
/Users/valenetjong/opt/anaconda3/envs/qiskit_env/lib/python3.9/site-packages/torch/nn/modules/loss.py:520: UserWarning: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([1, 2])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
/Users/valenetjong/qiskit/hybridlayers.py:88: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  gradients = np.array([gradients]).T
Training [5%]	Loss: 0.2527
Training [10%]	Loss: 0.2519
Training [15%]	Loss: 0.2525
Training [20%]	Loss: 0.2522
Training [25%]	Loss: 0.2528
Training [30%]	Loss: 0.2525
Training [35%]	Loss: 0.2524
Training [40%]	Loss: 0.2524
Training [45%]	Loss: 0.2525
Training [50%]	Loss: 0.2526
Training [55%]	Loss: 0.2524
Training [60%]	Loss: 0.2525
Training [65%]	Loss: 0.2527
Training [70%]	Loss: 0.2523
Training [75%]	Loss: 0.2530
Training [80%]	Loss: 0.2526
