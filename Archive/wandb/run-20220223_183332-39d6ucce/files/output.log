tensor([6])
result [{'0101': 7, '0111': 4, '1110': 6, '0110': 8, '1010': 7, '1111': 10, '1101': 5, '1011': 6, '0011': 4, '0001': 2, '0100': 10, '1100': 5, '1000': 8, '0010': 6, '0000': 7, '1001': 5}, {'0101': 4, '1011': 13, '0010': 2, '0111': 14, '1111': 15, '1101': 7, '0011': 6, '0001': 4, '0110': 6, '1010': 3, '1001': 6, '1000': 6, '1110': 10, '0100': 1, '1100': 3}, {'0010': 6, '0110': 3, '0101': 5, '1111': 4, '1101': 7, '0111': 6, '0001': 8, '0011': 5, '0000': 9, '1010': 8, '1011': 6, '1000': 5, '1110': 6, '0100': 3, '1100': 11, '1001': 8}, {'1011': 2, '0010': 2, '0111': 5, '1010': 8, '0101': 9, '0000': 11, '1000': 9, '1110': 5, '1001': 7, '1100': 3, '0100': 5, '0110': 8, '0001': 5, '0011': 8, '1111': 6, '1101': 7}, {'0010': 3, '1000': 3, '1011': 2, '1111': 6, '1101': 15, '0000': 4, '1110': 7, '0100': 2, '1100': 8, '0111': 5, '1010': 13, '1001': 8, '0011': 1, '0001': 5, '0110': 10, '0101': 8}, {'1110': 4, '1001': 2, '1000': 5, '1010': 4, '0010': 5, '0000': 4, '0101': 9, '1011': 8, '0111': 7, '1111': 10, '1101': 10, '0011': 8, '0001': 3, '0110': 9, '0100': 3, '1100': 9}, {'0101': 3, '1101': 2, '1111': 3, '0000': 6, '0010': 5, '0001': 7, '0011': 6, '0111': 4, '1001': 12, '1000': 6, '0100': 5, '1100': 6, '1110': 9, '1010': 8, '1011': 7, '0110': 11}, {'1000': 3, '0010': 9, '0101': 5, '0000': 10, '1111': 7, '1101': 4, '1010': 7, '1011': 5, '0011': 2, '0001': 4, '1100': 5, '0100': 9, '0110': 8, '1001': 7, '0111': 6, '1110': 9}, {'0111': 1, '1001': 1, '1101': 1, '0101': 2, '0001': 16, '0011': 2, '1010': 5, '1100': 2, '0100': 9, '0110': 5, '1110': 2, '1000': 15, '0010': 11, '0000': 28}, {'0111': 4, '1100': 6, '0100': 4, '0000': 2, '0010': 11, '1111': 10, '1101': 3, '1011': 7, '0011': 2, '0001': 8, '0110': 6, '1010': 8, '1001': 7, '1110': 9, '1000': 5, '0101': 8}]
Traceback (most recent call last):
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 157, in <module>
    main()
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 152, in main
    session.train()
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 88, in train
    outputs = self.model(inputs)
  File "/Users/valenetjong/opt/anaconda3/envs/qiskit_env/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridnet.py", line 28, in forward
    x = self.hybrid(x)
  File "/Users/valenetjong/opt/anaconda3/envs/qiskit_env/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 103, in forward
    return HybridFunction.apply(input, self.quantum_circuit, self.shift)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 69, in forward
    expectation_z = ctx.quantum_circuit.run(input[0].tolist())
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 49, in run
    states = np.array([el.keys() for el in result]).astype(float)
TypeError: float() argument must be a string or a number, not 'dict_keys'