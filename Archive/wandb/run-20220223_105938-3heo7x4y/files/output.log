/Users/valenetjong/qiskit/hybridlayers.py:86: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  gradient = torch.tensor([expectation_right]) - torch.tensor([expectation_left])
/Users/valenetjong/qiskit/hybridlayers.py:88: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  gradients = np.array([gradients]).T
Training [5%]	Loss: -0.7719
Training [10%]	Loss: -0.9159
Training [15%]	Loss: -0.9350
Training [20%]	Loss: -0.9431
Training [25%]	Loss: -0.9507
Training [30%]	Loss: -0.9605
Training [35%]	Loss: -0.9570
Training [40%]	Loss: -0.9573
Training [45%]	Loss: -0.9698
Training [50%]	Loss: -0.9664
Training [55%]	Loss: -0.9762
Training [60%]	Loss: -0.9774
Training [65%]	Loss: -0.9845
Training [70%]	Loss: -0.9842
Training [75%]	Loss: -0.9879
Training [80%]	Loss: -0.9896
Training [85%]	Loss: -0.9872
Training [90%]	Loss: -0.9910
Training [95%]	Loss: -0.9883
Training [100%]	Loss: -0.9918
Performance on test data:
	Loss: -0.9726
	Accuracy: 100.0%