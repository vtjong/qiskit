tensor([6])
result [{'1001': 7, '1110': 11, '0101': 4, '1010': 6, '1011': 6, '1111': 7, '1101': 5, '0111': 4, '1000': 7, '0100': 6, '1100': 5, '0010': 6, '0000': 7, '0011': 9, '0001': 3, '0110': 7}, {'0000': 2, '1001': 4, '0010': 4, '1010': 4, '1011': 9, '0110': 5, '1101': 8, '1111': 13, '0001': 5, '0011': 4, '0111': 8, '0100': 4, '1100': 10, '1110': 6, '1000': 7, '0101': 7}, {'1110': 8, '0001': 3, '0011': 5, '0000': 5, '1010': 7, '0101': 9, '0111': 6, '0010': 6, '1000': 9, '0100': 7, '1100': 9, '1001': 6, '1011': 5, '1111': 2, '1101': 7, '0110': 6}, {'1110': 3, '1111': 3, '1101': 5, '0000': 10, '0101': 4, '1010': 5, '1001': 9, '0100': 9, '1100': 7, '1000': 4, '0110': 5, '0111': 7, '0001': 2, '0011': 9, '0010': 7, '1011': 11}, {'1010': 5, '1000': 9, '0000': 6, '1001': 10, '1011': 11, '1110': 4, '0011': 6, '0001': 6, '1100': 2, '0100': 4, '0110': 5, '0010': 6, '0101': 6, '1101': 8, '1111': 6, '0111': 6}, {'0000': 3, '0010': 3, '1011': 9, '1001': 6, '1010': 6, '0101': 4, '0001': 3, '0011': 7, '0111': 9, '0100': 1, '1100': 7, '1110': 8, '1000': 4, '1111': 12, '1101': 10, '0110': 8}, {'1110': 1, '1011': 2, '1001': 5, '0101': 8, '1111': 8, '1101': 3, '1010': 5, '1000': 8, '0111': 5, '0001': 7, '0011': 8, '0010': 13, '0000': 13, '1100': 2, '0100': 6, '0110': 6}, {'1000': 6, '0101': 3, '1010': 5, '0100': 10, '1100': 9, '1001': 7, '1111': 6, '1101': 7, '1110': 10, '0011': 4, '0001': 5, '0110': 6, '0010': 7, '0000': 5, '0111': 4, '1011': 6}, {'1110': 2, '1001': 3, '0101': 3, '1010': 3, '0100': 6, '1100': 6, '1000': 6, '0111': 3, '0011': 1, '0001': 9, '0110': 3, '0010': 11, '0000': 44}, {'1000': 7, '0110': 4, '0101': 6, '1010': 9, '1111': 7, '1101': 6, '1011': 11, '1100': 6, '0100': 5, '0011': 3, '0001': 5, '1001': 5, '1110': 6, '0111': 5, '0010': 5, '0000': 10}]
counts [dict_values([7, 11, 4, 6, 6, 7, 5, 4, 7, 6, 5, 6, 7, 9, 3, 7])
 dict_values([2, 4, 4, 4, 9, 5, 8, 13, 5, 4, 8, 4, 10, 6, 7, 7])
 dict_values([8, 3, 5, 5, 7, 9, 6, 6, 9, 7, 9, 6, 5, 2, 7, 6])
 dict_values([3, 3, 5, 10, 4, 5, 9, 9, 7, 4, 5, 7, 2, 9, 7, 11])
 dict_values([5, 9, 6, 10, 11, 4, 6, 6, 2, 4, 5, 6, 6, 8, 6, 6])
 dict_values([3, 3, 9, 6, 6, 4, 3, 7, 9, 1, 7, 8, 4, 12, 10, 8])
 dict_values([1, 2, 5, 8, 8, 3, 5, 8, 5, 7, 8, 13, 13, 2, 6, 6])
 dict_values([6, 3, 5, 10, 9, 7, 6, 7, 10, 4, 5, 6, 7, 5, 4, 6])
 dict_values([2, 3, 3, 3, 6, 6, 6, 3, 1, 9, 3, 11, 44])
 dict_values([7, 4, 6, 9, 7, 6, 11, 6, 5, 3, 5, 5, 6, 5, 5, 10])]
states [dict_keys(['1001', '1110', '0101', '1010', '1011', '1111', '1101', '0111', '1000', '0100', '1100', '0010', '0000', '0011', '0001', '0110'])
 dict_keys(['0000', '1001', '0010', '1010', '1011', '0110', '1101', '1111', '0001', '0011', '0111', '0100', '1100', '1110', '1000', '0101'])
 dict_keys(['1110', '0001', '0011', '0000', '1010', '0101', '0111', '0010', '1000', '0100', '1100', '1001', '1011', '1111', '1101', '0110'])
 dict_keys(['1110', '1111', '1101', '0000', '0101', '1010', '1001', '0100', '1100', '1000', '0110', '0111', '0001', '0011', '0010', '1011'])
 dict_keys(['1010', '1000', '0000', '1001', '1011', '1110', '0011', '0001', '1100', '0100', '0110', '0010', '0101', '1101', '1111', '0111'])
 dict_keys(['0000', '0010', '1011', '1001', '1010', '0101', '0001', '0011', '0111', '0100', '1100', '1110', '1000', '1111', '1101', '0110'])
 dict_keys(['1110', '1011', '1001', '0101', '1111', '1101', '1010', '1000', '0111', '0001', '0011', '0010', '0000', '1100', '0100', '0110'])
 dict_keys(['1000', '0101', '1010', '0100', '1100', '1001', '1111', '1101', '1110', '0011', '0001', '0110', '0010', '0000', '0111', '1011'])
 dict_keys(['1110', '1001', '0101', '1010', '0100', '1100', '1000', '0111', '0011', '0001', '0110', '0010', '0000'])
 dict_keys(['1000', '0110', '0101', '1010', '1111', '1101', '1011', '1100', '0100', '0011', '0001', '1001', '1110', '0111', '0010', '0000'])]
Traceback (most recent call last):
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 157, in <module>
    main()
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 152, in main
    session.train()
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 88, in train
    outputs = self.model(inputs)
  File "/Users/valenetjong/opt/anaconda3/envs/qiskit_env/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridnet.py", line 28, in forward
    x = self.hybrid(x)
  File "/Users/valenetjong/opt/anaconda3/envs/qiskit_env/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 103, in forward
    return HybridFunction.apply(input, self.quantum_circuit, self.shift)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 69, in forward
    expectation_z = ctx.quantum_circuit.run(input[0].tolist())
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 54, in run
    probabilities = counts / self.shots
TypeError: unsupported operand type(s) for /: 'dict_values' and 'int'