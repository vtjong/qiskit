tensor([6])
result [{'1111': 7, '1101': 11, '0101': 4, '0100': 3, '1100': 7, '1001': 6, '1010': 12, '1011': 4, '0110': 3, '0011': 7, '0001': 7, '0000': 7, '0010': 6, '1000': 6, '1110': 5, '0111': 5}, {'0110': 2, '0001': 5, '0011': 4, '0000': 4, '1010': 3, '1100': 5, '0100': 4, '0111': 9, '1101': 10, '1111': 17, '1001': 3, '0010': 4, '0101': 6, '1110': 9, '1000': 3, '1011': 12}, {'1011': 4, '0100': 2, '1100': 5, '0000': 9, '1001': 9, '1010': 7, '1101': 5, '1111': 8, '0111': 8, '0010': 7, '0110': 4, '0011': 7, '0001': 8, '0101': 2, '1110': 7, '1000': 8}, {'0110': 1, '0010': 4, '1110': 4, '0000': 10, '1011': 6, '1010': 7, '1001': 9, '0001': 3, '0011': 7, '1101': 9, '1111': 3, '0111': 8, '1000': 11, '0100': 5, '1100': 6, '0101': 7}, {'0111': 6, '0010': 5, '1110': 4, '1001': 6, '1011': 5, '0000': 8, '1010': 6, '0001': 6, '0011': 7, '1101': 9, '1111': 8, '0110': 7, '0101': 5, '1000': 6, '0100': 3, '1100': 9}, {'1000': 4, '0101': 6, '0110': 4, '0011': 5, '0001': 2, '0010': 2, '0000': 3, '1001': 9, '0111': 12, '1010': 6, '1111': 10, '1101': 7, '0100': 8, '1100': 5, '1110': 7, '1011': 10}, {'0111': 3, '1011': 7, '0001': 4, '0011': 3, '1101': 3, '1111': 6, '1010': 9, '1001': 4, '0110': 4, '1100': 3, '0100': 7, '1000': 8, '1110': 5, '0000': 15, '0010': 11, '0101': 8}, {'1000': 6, '1001': 4, '1010': 4, '0000': 5, '0010': 10, '0111': 8, '1101': 5, '1111': 3, '0001': 9, '0011': 8, '1011': 6, '1110': 6, '0100': 4, '1100': 6, '0101': 8, '0110': 8}, {'1010': 1, '0101': 3, '1001': 6, '0111': 2, '0001': 14, '0011': 4, '0110': 3, '1100': 2, '0100': 13, '0000': 31, '0010': 11, '1000': 10}, {'0111': 2, '1010': 6, '0010': 7, '1011': 5, '1001': 8, '0101': 5, '1111': 6, '1101': 7, '1110': 5, '0100': 9, '1100': 6, '1000': 5, '0000': 7, '0001': 7, '0011': 8, '0110': 7}]
counts [dict_values([7, 11, 4, 3, 7, 6, 12, 4, 3, 7, 7, 7, 6, 6, 5, 5])
 dict_values([2, 5, 4, 4, 3, 5, 4, 9, 10, 17, 3, 4, 6, 9, 3, 12])
 dict_values([4, 2, 5, 9, 9, 7, 5, 8, 8, 7, 4, 7, 8, 2, 7, 8])
 dict_values([1, 4, 4, 10, 6, 7, 9, 3, 7, 9, 3, 8, 11, 5, 6, 7])
 dict_values([6, 5, 4, 6, 5, 8, 6, 6, 7, 9, 8, 7, 5, 6, 3, 9])
 dict_values([4, 6, 4, 5, 2, 2, 3, 9, 12, 6, 10, 7, 8, 5, 7, 10])
 dict_values([3, 7, 4, 3, 3, 6, 9, 4, 4, 3, 7, 8, 5, 15, 11, 8])
 dict_values([6, 4, 4, 5, 10, 8, 5, 3, 9, 8, 6, 6, 4, 6, 8, 8])
 dict_values([1, 3, 6, 2, 14, 4, 3, 2, 13, 31, 11, 10])
 dict_values([2, 6, 7, 5, 8, 5, 6, 7, 5, 9, 6, 5, 7, 7, 8, 7])]
states [dict_keys(['1111', '1101', '0101', '0100', '1100', '1001', '1010', '1011', '0110', '0011', '0001', '0000', '0010', '1000', '1110', '0111'])
 dict_keys(['0110', '0001', '0011', '0000', '1010', '1100', '0100', '0111', '1101', '1111', '1001', '0010', '0101', '1110', '1000', '1011'])
 dict_keys(['1011', '0100', '1100', '0000', '1001', '1010', '1101', '1111', '0111', '0010', '0110', '0011', '0001', '0101', '1110', '1000'])
 dict_keys(['0110', '0010', '1110', '0000', '1011', '1010', '1001', '0001', '0011', '1101', '1111', '0111', '1000', '0100', '1100', '0101'])
 dict_keys(['0111', '0010', '1110', '1001', '1011', '0000', '1010', '0001', '0011', '1101', '1111', '0110', '0101', '1000', '0100', '1100'])
 dict_keys(['1000', '0101', '0110', '0011', '0001', '0010', '0000', '1001', '0111', '1010', '1111', '1101', '0100', '1100', '1110', '1011'])
 dict_keys(['0111', '1011', '0001', '0011', '1101', '1111', '1010', '1001', '0110', '1100', '0100', '1000', '1110', '0000', '0010', '0101'])
 dict_keys(['1000', '1001', '1010', '0000', '0010', '0111', '1101', '1111', '0001', '0011', '1011', '1110', '0100', '1100', '0101', '0110'])
 dict_keys(['1010', '0101', '1001', '0111', '0001', '0011', '0110', '1100', '0100', '0000', '0010', '1000'])
 dict_keys(['0111', '1010', '0010', '1011', '1001', '0101', '1111', '1101', '1110', '0100', '1100', '1000', '0000', '0001', '0011', '0110'])]
Traceback (most recent call last):
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 157, in <module>
    main()
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 152, in main
    session.train()
  File "/Users/valenetjong/qiskit/hybridQNN/main.py", line 88, in train
    outputs = self.model(inputs)
  File "/Users/valenetjong/opt/anaconda3/envs/qiskit_env/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridnet.py", line 28, in forward
    x = self.hybrid(x)
  File "/Users/valenetjong/opt/anaconda3/envs/qiskit_env/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 103, in forward
    return HybridFunction.apply(input, self.quantum_circuit, self.shift)
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 69, in forward
    expectation_z = ctx.quantum_circuit.run(input[0].tolist())
  File "/Users/valenetjong/qiskit/hybridQNN/hybridlayers.py", line 54, in run
    probabilities = counts / self.shots
TypeError: unsupported operand type(s) for /: 'dict_values' and 'int'